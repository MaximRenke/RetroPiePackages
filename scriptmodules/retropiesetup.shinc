#!/bin/bash

# downloads and installs pre-compiles binaries of all essential programs and libraries
function rps_downloadBinaries()
{
    printMsg "Downloading binaries archive"
    # wget --progress=bar:force -O - 'http://blog.petrockblock.com/?wpdmdl=3' | tar jx --overwrite -C $rootdir RetroPie
    wget -O binariesDownload.tar.bz2 http://downloads.petrockblock.com/RetroPieSetupBinaries_240614.tar.bz2
    tar -jxvf binariesDownload.tar.bz2 -C $rootdir
    pushd $rootdir/RetroPie
    cp -r * ../
    popd    
    rm -rf $rootdir/RetroPie
    rm binariesDownload.tar.bz2   
}

function rps_checkNeededPackages()
{
    if [[ -z $(type -P git) || -z $(type -P dialog) ]]; then
        echo "Did not find needed packages 'git' and/or 'dialog'. I am trying to install these now."
        apt-get update
        apt-get install -y --force-yes git dialog
        if [ $? == '0' ]; then
            echo "Successfully installed 'git' and/or 'dialog'."
        else
            echo "Could not install 'git' and/or 'dialog'. Aborting now."
            exit 1
        fi
    else
        echo "Found needed packages 'git' and 'dialog'."
    fi 
}

# download, extract, and install binaries
function rps_main_binaries()
{
    __INFMSGS=""

    clear
    printMsg "Binaries-based installation"

    retropackages 300           # update and upgrade APT packages
    retropackages 318           # APT clean up
    retropackages 315           # modules

    rps_downloadBinaries        # download pre-compiled binaries and extract them

    retropackages 302           # SDL 2.0.1
    retropackages 303 install   # ES start script
    retropackages 303 configure # ES es_systems
    retropackages 306 install   # SNESDev config file
    retropackages 317           # disable time outs
    retropackages 304           # ES theme 'Simple'
    
    retropackages 106           # Stella emulator
    retropackages 123           # ScummVM
    retropackages 124           # ZMachine
    retropackages 125           # ZXSpectrum Fuse
    retropackages 109           # C64 ROMs
    retropackages 113           # Hatari
    retropackages 105           # Dosbox
    retropackages 110           # eDuke3D

    retropackages 316           # set avoid safe mode
    retropackages 305           # video mode script 'runcommand'

    # configure all emulator and libretro components
    for (( i = 100; i <= 128; i++ )); do
        retropackages $i configure
    done

    for (( i = 200; i <= 211; i++ )); do
        retropackages $i configure
    done

    __INFMSGS="$__INFMSGS The Amiga emulator can be started from command line with '$rootdir/emulators/uae4all/uae4all'. Note that you must manually copy a Kickstart rom with the name 'kick.rom' to the directory $rootdir/emulators/uae4all/."
    __INFMSGS="$__INFMSGS You need to copy NeoGeo BIOS files to the folder '$rootdir/emulators/gngeo-0.7/neogeo-bios/'."
    __INFMSGS="$__INFMSGS You need to copy Intellivision BIOS files to the folder '/usr/local/share/jzintv/rom'."

    if [[ ! -z $__INFMSGS ]]; then
        dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "$__INFMSGS" 20 60    
    fi

    dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Finished tasks.\nStart the front end with 'emulationstation'. You now have to copy roms to the roms folders. Have fun!" 22 76    
}

function rps_main_updatescript()
{
  printMsg "Fetching latest version of the RetroPie Setup Script."
  pushd $scriptdir
  if [[ ! -d ".git" ]]; then
    dialog --backtitle "PetRockBlock.com - RetroPie Setup." --msgbox "Cannot find direcotry '.git'. Please clone the RetroPie Setup script via 'git clone git://github.com/petrockblog/RetroPie-Setup.git'" 20 60    
    popd
    return
  fi
  git pull
  popd
  dialog --backtitle "PetRockBlock.com - ORetroPie Setup." --msgbox "Fetched the latest version of the RetroPie Setup script. You need to restart the script." 20 60    
}

function rps_main_options()
{
    cmd=(dialog --separate-output --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --checklist "Select options with 'space' and arrow keys. The default selection installs a complete set of packages and configures basic settings. The entries marked as (C) denote the configuration steps. For an update of an installation you would deselect these to keep all your settings untouched." 22 76 16)
    options=(1 "Install latest rpi-update script" ON \
             2 "Update firmware with rpi-update" OFF \
             3 "Update APT repositories" ON \
             4 "Perform APT upgrade" ON \
             5 "Apply fix for XBian (Neede to make components compile properly)" ON \
             6 "(C) Add user $user to groups video, audio, and input" ON \
             7 "(C) Enable modules ALSA, uinput, and joydev" ON \
             8 "(C) Export SDL_NOMOUSE=1" ON \
             9 "Install all needed APT packages" ON \
             10 "(C) Generate folder structure" ON \
             11 "Install RetroArch (7 min)" ON \
             12 "(C) Configure video, rewind, and keyboard for RetroArch" ON \
             13 "Install Amiga emulator UAE4RPi (15 min)" ON \
             14 "Install Apple ][ emulator (Linapple, 7 min)" ON \
             15 "Install Amstrad CPC emulator CPC4Rpi" ON \
             16 "Install Atari 800 emulator (6 min)" ON \
             17 "Install Atari 2600 RetroArch core (15 min)" ON \
             18 "Install Atari 2600 emulator Stella (1 min)" ON \
             19 "Install Atari ST/STE/TT/Falcon emulator Hatari (1 min)" ON \
             20 "Install Apple Macintosh (BasiliskII, 23 min)" ON \
             21 "Install C64 emulator (Vice)" ON \
             22 "Install NXEngine / Cave Story (16 min)" ON \
             23 "Install Doom core" ON \
             24 "Install eDuke32 with shareware files" ON \
             25 "Install Game Boy Advance emulator (gpSP, 41 min)" ON \
             26 "Install Game Boy Color core (7 min)" ON \
             27 "Install IntelliVision emulator (jzintv, 10 min)" ON \
             28 "Install MAME (iMAME4All) core" ON \
             29 "Install AdvMAME emulator" ON \
             30 "Install MAME4All-Pi (84 min)" ON \
             31 "Install FBA core (130 min)" ON \
             32 "Install MAME emulator PiFBA (43 min)" ON \
             33 "Install Mastersystem/Game Gear/Megadrive emulator (OsmOse, 7 min)" ON \
             34 "Install DGEN (Megadrive/Genesis emulator, 32 min)" ON \
             35 "(C) Configure DGEN" ON \
             36 "Install Megadrive/Genesis core (Genesis-Plus-GX, 16 min)" ON \
             37 "Install Megadrive/Genesis core (Picodrive, 7 min)" ON \
             38 "Install NeoGeo emulator GnGeo 0.7" ON \
             39 "Install NeoGeo emulator GnGeo-Pi 0.85 (21 min)" ON \
             40 "(C) Configure NeoGeo" ON \
             41 "Install NES core (8 min)" ON \
             42 "Install N64 emulator Mupen 64 Plus RPi (56 min)" ON \
             43 "Install PC Engine core (Mednafen-PCE-Libretro, 21 min)" ON \
             44 "Install PC emulator (RPix86)" ON \
             45 "Install PC emulator (Dosbox, 1 min)" ON \
             46 "Install PC emulator (FastDosbox)" ON \
             47 "Install Playstation core (20 min)" ON \
             48 "Install PSP emulator PPSSPP" OFF \
             49 "Install ScummVM (1 min)" ON \
             50 "Install Super NES core (11 min)" ON \
             51 "Install SNES9X emulator (15 min)" ON \
             52 "Install PiSNES emulator (8 min)" ON \
             53 "(C) Configure Super NES core" ON \
             54 "Install Wolfenstein3D engine (3 min)" ON \
             55 "Install Z Machine emulator (Frotz)" ON \
             56 "Install ZX Spectrum emulator (Fuse, 1 min)" ON \
             57 "Install ZX Spectrum emulator (FBZX, 3 min)" ON \
             58 "Install BCM library" ON \
             59 "Install Dispmanx library" ON \
             60 "Install SNESDev" ON \
             61 "Install Emulation Station" ON \
             62 "Install Emulation Station Themes" ON \
             63 "Install ES-config" ON \
             64 "(C) Generate config file for Emulation Station" ON \
             65 "(C) Configure sound settings for RetroArch" ON \
             66 "(C) Set avoid_safe_mode=1 (for GPIO adapter)" ON \
             67 "Install runcommand script" ON \
             68 "(C) Configure /boot/config.txt" ON \
             69 "(C) Disable screen blanking and power down timeout" ON )
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
    clear
    __ERRMSGS=""
    __INFMSGS=""
    if [ "$choices" != "" ]; then
        now=$(date +'%d%m%Y_%H%M')
        {
            for choice in $choices
            do
                case $choice in
                    1) rc_install_rpiupdate ;;
                    2) rc_run_rpiupdate ;;
                    3) rc_update_apt ;;
                    4) rc_upgrade_apt ;;
                    5) rc_fixForXBian ;;
                    6) rc_add_to_groups ;;
                    7) rc_ensure_modules ;;
                    8) rc_exportSDLNOMOUSE ;;
                    9) rc_installAPTPackages ;;
                    10) rps_prepareFolders ;;
                    11) em_install_retroarch ;;
                    12) em_configureRetroArch ;;
                    13) em_install_amiga ;;
                    14) em_install_linapple ;;
                    15) em_install_cpc4rpi ;;
                    16) em_install_atari800 ;;
                    17) lr_install_atari2600 ;;
                    18) em_install_stella ;;
                    19) em_install_hatari ;;
                    20) em_install_basiliskII ;;
                    21) em_install_viceC64 ;;
                    22) lr_install_cavestory ;;
                    23) lr_install_doom ;;
                    24) em_install_eduke32 ;;
                    25) em_install_gba ;;
                    26) lr_install_gbc ;;
                    27) em_install_intellivision ;;
                    28) lr_install_mame ;;
                    29) em_install_advmame ;;
                    30) em_install_mame4allpi ;;
                    31) lr_install_fba ;;
                    32) em_install_pifba ;;
                    33) em_install_megadrive ;;
                    34) em_install_dgen ;;
                    35) em_configureDGEN ;;
                    36) lr_install_megadriveLibretro ;;
                    37) lr_install_picodrive ;;
                    38) em_install_neogeo ;;
                    39) em_install_GnGeoPi ;;
                    40) em_configureNeogeo ;;
                    41) lr_install_nes ;;
                    42) em_install_mupen64plus_rpi ;;
                    43) lc_installPCEngine ;;
                    44) em_install_rpix86 ;;
                    45) em_install_dosbox ;;
                    46) em_install_fastdosbox ;;
                    47) lr_install_psx ;;
                    48) em_install_ppsspp ;;
                    49) em_install_scummvm ;;
                    50) lr_install_snes ;;
                    51) em_install_snes9x ;;
                    52) em_install_pisnes ;;
                    53) lr_configure_snes ;;
                    54) em_install_wolfenstein3d ;;
                    55) em_install_zmachine ;;
                    56) em_install_zxspectrum ;;
                    57) em_install_fbzx ;;
                    58) sup_install_bcmlibrary ;;
                    59) sup_install_dispmanx ;;
                    60) sup_install_snesdev ;;
                    61) sup_install_emulationstation ;;
                    62) rps_install_esthemes ;;
                    63) sup_install_esconfig ;;
                    64) sup_generate_esconfig ;;
                    65) em_configureSoundsettings ;;
                    66) rc_setAvoidSafeMode ;;
                    67) sup_install_runcommandscript ;;
                    68) rc_configureBootConfig ;;
                    69) rc_disableTimeouts ;;
                esac
            done

            chgrp -R $user $rootdir
            chown -R $user $rootdir

            rps_createDebugLog

        } 2>&1 | tee >(gzip --stdout > $scriptdir/logs/run_$now.log.gz)

        if [[ ! -z $__ERRMSGS ]]; then
            dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "$__ERRMSGS See debug.log for more details." 20 60    
        fi

        if [[ ! -z $__INFMSGS ]]; then
            dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "$__INFMSGS" 20 60    
        fi

        dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Finished tasks.\nStart the front end with 'emulationstation'. You now have to copy roms to the roms folders. Have fun!" 20 60    

        chown -R $user $scriptdir/logs/run_$now.log.gz
        chgrp -R $user $scriptdir/logs/run_$now.log.gz
    fi
}

function rps_availFreeDiskSpace()
{
    local __required=$1
    local __avail=`df -P $rootdir | tail -n1 | awk '{print $4}'`

    required_MB=`expr $__required / 1024`
    available_MB=`expr $__avail / 1024`

    if [[ "$__required" -le "$__avail" ]] || ask "Minimum recommended disk space ($required_MB MB) not available. Try 'sudo raspi-config' to resize partition to full size. Only $available_MB MB available at $rootdir continue anyway?"; then
        return 0;
    else
        exit 0;
    fi
}

function rps_main_setup()
{
    now=$(date +'%d%m%Y_%H%M%S')
    {
        while true; do
            cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Choose task." 22 76 16)
            options=(1 "Re-generate config file for Emulation Station" 
                     2 "Install latest Rasperry Pi firmware" 
                     3 "Install AdvanceMenu"
                     4 "Start Emulation Station on boot?" 
                     5 "Configure SNESDev"
                     6 "Configure Xarcade2Jstick"
                     7 "Enable/disable RetroPie splashscreen"
                     8 "Change RetroPie splashscreen"
                     9 "Configure audio settings"
                     10 "Change ARM frequency" 
                     11 "Change SDRAM frequency"
                     12 "Install/update multi-console gamepad drivers for GPIO" 
                     13 "Enable gamecon_gpio_rpi with SNES-pad config"
                     14 "Run 'ES-scraper'" 
                     15 "Install and configure SAMBA shares"
                     16 "Install USB-ROM-Copy service"
                     17 "Install drivers for XBox 360 Wired Controllers"
                     18 "Install driver and tools for PS3 controllers"
                     19 "Configure RetroArch Netplay"
                     20 "Register controller for RetroArch emulator"
                     21 "Update input configuration of Emulation Station"
                     22 "Tweak user bash profile"
                     23 "Generate debug log" )
            choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)    
            if [ "$choices" != "" ]; then
                case $choices in
                     1) sup_generate_esconfig ;;
                     2) rc_run_rpiupdate ;;
                     3) sup_install_advancemenu ;;
                     4) set_changeBootbehaviour ;;
                     5) sup_enableDisableSNESDevStart ;;
                     6) sup_enableDisableXarcade2JstickStart ;;
                     7) set_enableDisableSplashscreen ;;
                     8) rps_splashscreen ;;
                     9) set_changeAudioOutput ;;
                     10) set_setArmFreq ;;
                     11) set_setSDRAMFreq ;;
                     12) set_installGPIOpadModules ;;
                     13) set_enableGameconSnes ;;
                     14) rps_scraperMenu ;;
                     15) set_configureSAMBA ;;
                     16) set_install_USBROMService ;;
                     17) set_install_xboxdrv ;;
                     18) set_installps3controller ;;
                     19) rps_retronetplaysetup ;;
                     20) set_RetroarchJoyconfig ;;
                     21) set_ES_updateinput ;;
                     22) rc_tweakProfile ;;
                     23) rps_createDebugLog ;;
                esac
            else
                break
            fi
        done    
    } 2>&1 | tee >(gzip --stdout > $scriptdir/logs/run_$now.log.gz)
    chown -R $user $scriptdir/logs/run_$now.log.gz
    chgrp -R $user $scriptdir/logs/run_$now.log.gz
}

